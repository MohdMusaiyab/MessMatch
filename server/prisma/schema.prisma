// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  COLLEGE
  CONTRACTOR
  CORPORATE
  ADMIN
  OTHER
}

enum SecurityQuestion {
  MOTHERS_MAIDEN_NAME
  FIRST_PET_NAME
  FAVORITE_CHILDHOOD_MEMORY
  FAVORITE_TEACHER_NAME
  BIRTH_TOWN_NAME
}

enum ServiceType {
  HOSTELS
  CORPORATE_EVENTS
  CORPORATE_OFFICES
  WEDDINGS
  PARTIES
  OTHER
}

enum MenuType {
  VEG
  NON_VEG
  BOTH
}

model User {
  id               String           @id @default(uuid())
  name             String
  email            String           @unique
  password         String
  role             Role
  securityQuestion SecurityQuestion
  securityAnswer   String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  contractor       MessContractor? // Optional relation for contractors
  reviewsGiven     Review[]         @relation("ReviewsGiven") // Reviews written by the user
}

model MessContractor {
  id             String        @id @default(uuid())
  userId         String        @unique
  user           User          @relation(fields: [userId], references: [id]) // Relation with User
  menus          Menu[] // Array of menu items
  numberOfPeople Int? // Approximate number of people they serve
  services       ServiceType[] // Enum list for predefined service types
  ratings        Float? // Average rating
  reviews        Review[] // Reviews received
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Menu {
  id           String         @id @default(uuid())
  contractorId String
  contractor   MessContractor @relation(fields: [contractorId], references: [id])
  name         String // Menu name (e.g., "Breakfast Menu", "Wedding Menu")
  items        String[] // Array of items in the menu
  pricePerHead Float // Price per head for the menu
  type         MenuType // Type of menu: VEG, NON_VEG, BOTH
}

model Review {
  id           String         @id @default(uuid())
  contractorId String
  reviewerId   String
  reviewer     User           @relation(fields: [reviewerId], references: [id], name: "ReviewsGiven")
  contractor   MessContractor @relation(fields: [contractorId], references: [id])
  rating       Int // Rating out of 5
  comment      String? // Optional comment
  createdAt    DateTime       @default(now())
}
